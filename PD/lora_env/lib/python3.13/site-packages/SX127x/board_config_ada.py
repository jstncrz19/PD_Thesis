"""
Defines the BOARD class that contains the board pin mappings.
Modified for Raspberry Pi + SX127x LoRa with safe GPIO setup and event handling.
"""

import RPi.GPIO as GPIO
import spidev
import time


class BOARD:
    """Board initialisation/teardown and pin configuration is kept here."""

    # GPIO pin mapping (BCM mode)
    DIO0 = 4     # LoRa DIO0
    DIO1 = 23    # optional
    DIO2 = 24    # optional
    RESET = 25   # LoRa RESET
    CS = 8       # SPI CE0 (Chip Select)

    spi = None

    @staticmethod
    def setup():
        """Configure Raspberry Pi GPIOs and SPI."""
        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        GPIO.cleanup()  # Clean any old states

        # Setup DIO pins
        for gpio_pin in [BOARD.DIO0, BOARD.DIO1, BOARD.DIO2]:
            try:
                GPIO.setup(gpio_pin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
            except Exception:
                pass

        # Setup RESET pin
        GPIO.setup(BOARD.RESET, GPIO.OUT)
        GPIO.output(BOARD.RESET, 1)
        time.sleep(0.1)
        GPIO.output(BOARD.RESET, 0)
        time.sleep(0.1)
        GPIO.output(BOARD.RESET, 1)
        time.sleep(0.1)

        # Blink signal to indicate setup done
        BOARD.blink(0.1, 2)
        print("(Safe setup complete.)")

    @staticmethod
    def teardown():
        """Cleanup GPIO and SPI."""
        try:
            GPIO.cleanup()
        except Exception:
            pass
        try:
            if BOARD.spi:
                BOARD.spi.close()
        except Exception:
            pass

    @staticmethod
    def SpiDev(spi_bus=0, spi_cs=0):
        """Init and return the SpiDev object."""
        baudrate = 5000000
        BOARD.spi = spidev.SpiDev()
        BOARD.spi.open(spi_bus, spi_cs)
        BOARD.spi.max_speed_hz = baudrate
        BOARD.spi.mode = 0
        return BOARD.spi

    @staticmethod
    def add_event_detect(dio_number, callback):
        """Safely wrap around GPIO.add_event_detect."""
        try:
            GPIO.remove_event_detect(dio_number)
        except Exception:
            pass

        try:
            GPIO.setup(dio_number, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
            GPIO.add_event_detect(dio_number, GPIO.RISING, callback=callback)
        except RuntimeError as e:
            print(f"[Warning] Could not add event detection on GPIO{dio_number}: {e}")

    @staticmethod
    def add_events(cb_dio0, cb_dio1=None, cb_dio2=None, cb_dio3=None, cb_dio4=None, cb_dio5=None, switch_cb=None):
        """Register DIO pin callbacks safely."""
        BOARD.add_event_detect(BOARD.DIO0, callback=cb_dio0)
        if cb_dio1:
            BOARD.add_event_detect(BOARD.DIO1, callback=cb_dio1)
        if cb_dio2:
            BOARD.add_event_detect(BOARD.DIO2, callback=cb_dio2)

    @staticmethod
    def led_on(value=1):
        """Dummy LED control."""
        return value

    @staticmethod
    def led_off():
        """Dummy LED control."""
        return 0

    @staticmethod
    def blink(time_sec, n_blink):
        """Blink LED (optional)."""
        if n_blink == 0:
            return
        for _ in range(n_blink):
            time.sleep(time_sec)
